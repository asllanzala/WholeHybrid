package com.honeywell.wholesale.framework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "account".
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "account";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CompanyAccount = new Property(1, String.class, "companyAccount", false, "company_account");
        public final static Property EmployeeId = new Property(2, String.class, "employeeId", false, "employee_id");
        public final static Property LoginName = new Property(3, String.class, "loginName", false, "login_name");
        public final static Property UserPassword = new Property(4, String.class, "userPassword", false, "user_password");
        public final static Property AccountRole = new Property(5, String.class, "accountRole", false, "account_role");
        public final static Property Token = new Property(6, String.class, "token", false, "token");
        public final static Property ShopId = new Property(7, String.class, "shopId", false, "shop_id");
        public final static Property ShopName = new Property(8, String.class, "shopName", false, "shop_name");
        public final static Property AllShops = new Property(9, String.class, "allShops", false, "all_shops");
        public final static Property UserName = new Property(10, String.class, "userName", false, "user_name");
        public final static Property UpdateTime = new Property(11, String.class, "updateTime", false, "update_time");
    }


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"account\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"company_account\" TEXT," + // 1: companyAccount
                "\"employee_id\" TEXT," + // 2: employeeId
                "\"login_name\" TEXT," + // 3: loginName
                "\"user_password\" TEXT," + // 4: userPassword
                "\"account_role\" TEXT," + // 5: accountRole
                "\"token\" TEXT," + // 6: token
                "\"shop_id\" TEXT," + // 7: shopId
                "\"shop_name\" TEXT," + // 8: shopName
                "\"all_shops\" TEXT," + // 9: allShops
                "\"user_name\" TEXT," + // 10: userName
                "\"update_time\" TEXT);"); // 11: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"account\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String companyAccount = entity.getCompanyAccount();
        if (companyAccount != null) {
            stmt.bindString(2, companyAccount);
        }
 
        String employeeId = entity.getEmployeeId();
        if (employeeId != null) {
            stmt.bindString(3, employeeId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(4, loginName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(5, userPassword);
        }
 
        String accountRole = entity.getAccountRole();
        if (accountRole != null) {
            stmt.bindString(6, accountRole);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(8, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(9, shopName);
        }
 
        String allShops = entity.getAllShops();
        if (allShops != null) {
            stmt.bindString(10, allShops);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(11, userName);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(12, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String companyAccount = entity.getCompanyAccount();
        if (companyAccount != null) {
            stmt.bindString(2, companyAccount);
        }
 
        String employeeId = entity.getEmployeeId();
        if (employeeId != null) {
            stmt.bindString(3, employeeId);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(4, loginName);
        }
 
        String userPassword = entity.getUserPassword();
        if (userPassword != null) {
            stmt.bindString(5, userPassword);
        }
 
        String accountRole = entity.getAccountRole();
        if (accountRole != null) {
            stmt.bindString(6, accountRole);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String shopId = entity.getShopId();
        if (shopId != null) {
            stmt.bindString(8, shopId);
        }
 
        String shopName = entity.getShopName();
        if (shopName != null) {
            stmt.bindString(9, shopName);
        }
 
        String allShops = entity.getAllShops();
        if (allShops != null) {
            stmt.bindString(10, allShops);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(11, userName);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(12, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // companyAccount
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // employeeId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loginName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userPassword
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accountRole
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // token
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shopId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // shopName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // allShops
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompanyAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmployeeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoginName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAccountRole(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShopId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setShopName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAllShops(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
