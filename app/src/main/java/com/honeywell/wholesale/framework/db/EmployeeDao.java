package com.honeywell.wholesale.framework.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "employee".
*/
public class EmployeeDao extends AbstractDao<Employee, Long> {

    public static final String TABLENAME = "employee";

    /**
     * Properties of entity Employee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EmployeeId = new Property(1, int.class, "employeeId", false, "employee_id");
        public final static Property UserName = new Property(2, String.class, "userName", false, "username");
        public final static Property Password = new Property(3, String.class, "password", false, "password");
        public final static Property EmployeeName = new Property(4, String.class, "employeeName", false, "employee_name");
        public final static Property ShopId = new Property(5, int.class, "shopId", false, "shop_id");
        public final static Property Enabled = new Property(6, int.class, "enabled", false, "enabled");
    }


    public EmployeeDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"employee\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"employee_id\" INTEGER NOT NULL ," + // 1: employeeId
                "\"username\" TEXT," + // 2: userName
                "\"password\" TEXT," + // 3: password
                "\"employee_name\" TEXT," + // 4: employeeName
                "\"shop_id\" INTEGER NOT NULL ," + // 5: shopId
                "\"enabled\" INTEGER NOT NULL );"); // 6: enabled
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"employee\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEmployeeId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String employeeName = entity.getEmployeeName();
        if (employeeName != null) {
            stmt.bindString(5, employeeName);
        }
        stmt.bindLong(6, entity.getShopId());
        stmt.bindLong(7, entity.getEnabled());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Employee entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEmployeeId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String employeeName = entity.getEmployeeName();
        if (employeeName != null) {
            stmt.bindString(5, employeeName);
        }
        stmt.bindLong(6, entity.getShopId());
        stmt.bindLong(7, entity.getEnabled());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Employee readEntity(Cursor cursor, int offset) {
        Employee entity = new Employee( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // employeeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // employeeName
            cursor.getInt(offset + 5), // shopId
            cursor.getInt(offset + 6) // enabled
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Employee entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmployeeId(cursor.getInt(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmployeeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopId(cursor.getInt(offset + 5));
        entity.setEnabled(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Employee entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Employee entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Employee entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
